generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  phone         String   @unique
  whatsappId    String?  @unique // WhatsApp user ID
  avatar        String?
  loyaltyPoints Int      @default(0)
  totalVisits   Int      @default(0)
  lastVisit     DateTime?
  preferences   Json?    // JSON field for storing WhatsApp preferences
  metadata      Json?    // Additional WhatsApp bot data
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  appointments Appointment[]
  reviews      Review[]
  messages     WhatsAppMessage[]
  
  @@index([phone])
  @@index([whatsappId])
  @@index([createdAt])
}

model Staff {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  avatar      String?
  specialties String?
  rating      Float    @default(0)
  experience  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments Appointment[]
  services     StaffService[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  appointments AppointmentService[]
  staffServices StaffService[]
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  appointments Appointment[]
}

model Appointment {
  id         String            @id @default(cuid())
  customerId String
  staffId    String
  branchId   String
  date       DateTime
  status     AppointmentStatus @default(SCHEDULED)
  notes      String?
  totalPrice Float             @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  customer Customer @relation(fields: [customerId], references: [id])
  staff    Staff    @relation(fields: [staffId], references: [id])
  branch   Branch   @relation(fields: [branchId], references: [id])
  services AppointmentService[]
}

model AppointmentService {
  id            String @id @default(cuid())
  appointmentId String
  serviceId     String
  price         Float
  
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])
}

model StaffService {
  id        String @id @default(cuid())
  staffId   String
  serviceId String
  
  staff   Staff   @relation(fields: [staffId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  customerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  
  customer Customer @relation(fields: [customerId], references: [id])
}

model WhatsAppMessage {
  id         String   @id @default(cuid())
  customerId String
  messageId  String   @unique // WhatsApp message ID
  content    String
  messageType String  // text, image, document, etc.
  direction  String   // inbound, outbound
  timestamp  DateTime
  metadata   Json?    // Additional WhatsApp message data
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  customer Customer @relation(fields: [customerId], references: [id])
  
  @@index([customerId])
  @@index([timestamp])
  @@index([messageId])
}

model Product {
  id                  String   @id @default(cuid())
  name                String
  description         String
  price               Decimal  @db.Decimal(10,2)
  category            String
  type                String
  sku                 String   @unique
  isActive            Boolean  @default(true)
  durationMinutes     Int?
  stockLevel          Int?
  lowStockThreshold   Int?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([category])
  @@index([type])
  @@index([sku])
  @@index([isActive])
  @@index([name])
  @@map("products")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
